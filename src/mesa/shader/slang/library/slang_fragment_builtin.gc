
//
// TODO:
// - implement texture1D, texture2D, texture3D, textureCube,
// - implement shadow1D, shadow2D,
// - implement dFdx, dFdy,
//

//
// From Shader Spec, ver. 1.10, rev. 59
//

__fixed_input vec4 gl_FragCoord;
__fixed_input bool gl_FrontFacing;
__fixed_output vec4 gl_FragColor;
__fixed_output vec4 gl_FragData[gl_MaxDrawBuffers];
__fixed_output float gl_FragDepth;

varying vec4 gl_Color;
varying vec4 gl_SecondaryColor;
varying vec4 gl_TexCoord[gl_MaxTextureCoords];
varying float gl_FogFragCoord;

//
// 8.7 Texture Lookup Functions
//

vec4 texture1D (sampler1D sampler, float coord, float bias) {
	// XXX:
    return vec4 (0.0);
}

vec4 texture1DProj (sampler1D sampler, vec2 coord, float bias) {
    return texture1D (sampler, coord.s / coord.t, bias);
}

vec4 texture1DProj (sampler1D sampler, vec4 coord, float bias) {
    return texture1D (sampler, coord.s / coord.q, bias);
}

vec4 texture2D (sampler2D sampler, vec2 coord, float bias) {
	// XXX:
    return vec4 (0.0);
}

vec4 texture2DProj (sampler2D sampler, vec3 coord, float bias) {
	vec2 u;
	u.s = coord.s / coord.p;
	u.t = coord.t / coord.p;
    return texture2D (sampler, u, bias);
}

vec4 texture2DProj (sampler2D sampler, vec4 coord, float bias) {
	vec2 u;
	u.s = coord.s / coord.q;
	u.t = coord.t / coord.q;
    return texture2D (sampler, u, bias);
}

vec4 texture3D (sampler3D sampler, vec3 coord, float bias) {
	// XXX:
    return vec4 (0.0);
}

vec4 texture3DProj (sampler3D sampler, vec4 coord, float bias) {
	vec3 u;
	u.s = coord.s / coord.q;
	u.t = coord.t / coord.q;
	u.p = coord.p / coord.q;
    return texture3D (sampler, u, bias);
}

vec4 textureCube (samplerCube sampler, vec3 coord, float bias) {
	// XXX:
    return vec4 (0.0);
}

vec4 shadow1D (sampler1DShadow sampler, vec3 coord, float bias) {
	// XXX:
    return vec4 (0.0);
}

vec4 shadow2D (sampler2DShadow sampler, vec3 coord, float bias) {
	// XXX:
    return vec4 (0.0);
}

vec4 shadow1DProj (sampler1DShadow sampler, vec4 coord, float bias) {
	vec3 u;
	u.s = coord.s / coord.q;
	u.t = 0.0;
	u.p = coord.p / coord.q;
    return shadow1D (sampler, u, bias);
}

vec4 shadow2DProj (sampler2DShadow sampler, vec4 coord, float bias) {
	vec3 u;
	u.s = coord.s / coord.q;
	u.t = coord.t / coord.q;
	u.p = coord.p / coord.q;
    return shadow2D (sampler, u, bias);
}

//
// 8.8 Fragment Processing Functions
//

float dFdx (float p) {
	// XXX:
    return 0.0;
}

vec2 dFdx (vec2 p) {
	// XXX:
    return vec2 (0.0);
}

vec3 dFdx (vec3 p) {
	// XXX:
    return vec3 (0.0);
}

vec4 dFdx (vec4 p) {
	// XXX:
    return vec4 (0.0);
}

float dFdy (float p) {
	// XXX:
    return 0.0;
}

vec2 dFdy (vec2 p) {
	// XXX:
    return vec2 (0.0);
}

vec3 dFdy (vec3 p) {
	// XXX:
    return vec3 (0.0);
}

vec4 dFdy (vec4 p) {
	// XXX:
    return vec4 (0.0);
}

float fwidth (float p) {
    return abs (dFdx (p)) + abs (dFdy (p));
}

vec2 fwidth (vec2 p) {
    return abs (dFdx (p)) + abs (dFdy (p));
}

vec3 fwidth (vec3 p) {
    return abs (dFdx (p)) + abs (dFdy (p));
}

vec4 fwidth (vec4 p) {
    return abs (dFdx (p)) + abs (dFdy (p));
}

