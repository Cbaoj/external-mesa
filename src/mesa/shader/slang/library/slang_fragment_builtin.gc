/*
 * Mesa 3-D graphics library
 * Version:  6.5
 *
 * Copyright (C) 2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

//
// TODO:
// - implement dFdx, dFdy,
//

//
// From Shader Spec, ver. 1.10, rev. 59
//

__fixed_input vec4 gl_FragCoord;
__fixed_input bool gl_FrontFacing;
__fixed_output vec4 gl_FragColor;
__fixed_output vec4 gl_FragData[gl_MaxDrawBuffers];
__fixed_output float gl_FragDepth;

varying vec4 gl_Color;
varying vec4 gl_SecondaryColor;
varying vec4 gl_TexCoord[gl_MaxTextureCoords];
varying float gl_FogFragCoord;



//// 8.7 Texture Lookup Functions (with bias)

vec4 texture1D(const sampler1D sampler, const float coord, const float bias)
{
   vec4 coord4;
   coord4.x = coord;
   coord4.w = bias;
   __asm vec4_texb1d __retVal, sampler, coord4;
}

vec4 texture1DProj(const sampler1D sampler, const vec2 coord, const float bias)
{
   // do projection here (there's no vec4_texbp1d instruction)
   vec4 pcoord;
   pcoord.x = coord.x / coord.y;
   pcoord.w = bias;
   __asm vec4_texb1d __retVal, sampler, pcoord;
}

vec4 texture1DProj(const sampler1D sampler, const vec4 coord, const float bias)
{
   // do projection here (there's no vec4_texbp1d instruction)
   vec4 pcoord;
   pcoord.x = coord.x / coord.z;
   pcoord.w = bias;
   __asm vec4_texb1d __retVal, sampler, pcoord;
}


vec4 texture2D(const sampler2D sampler, const vec2 coord, const float bias)
{
   vec4 coord4;
   coord4.xy = coord.xy;
   coord4.w = bias;
   __asm vec4_texb2d __retVal, sampler, coord4;
}

vec4 texture2DProj(const sampler2D sampler, const vec3 coord, const float bias)
{
   // do projection here (there's no vec4_texbp2d instruction)
   vec4 pcoord;
   pcoord.xy = coord.xy / coord.z;
   pcoord.w = bias;
   __asm vec4_texb2d __retVal, sampler, pcoord;
}

vec4 texture2DProj(const sampler2D sampler, const vec4 coord, const float bias)
{
   // do projection here (there's no vec4_texbp2d instruction)
   vec4 pcoord;
   pcoord.xy = coord.xy / coord.w;
   pcoord.w = bias;
   __asm vec4_texb2d __retVal, sampler, pcoord;
}


vec4 texture3D(const sampler3D sampler, const vec3 coord, const float bias)
{
   vec4 coord4;
   coord4.xyz = coord.xyz;
   coord4.w = bias;
   __asm vec4_texb3d __retVal, sampler, coord4;
}

vec4 texture3DProj(const sampler3D sampler, const vec4 coord, const float bias)
{
   // do projection here (there's no vec4_texbp3d instruction)
   vec4 pcoord;
   pcoord.xyz = coord.xyz / coord.w;
   pcoord.w = bias;
   __asm vec4_texb3d __retVal, sampler, pcoord;
}


vec4 textureCube(const samplerCube sampler, const vec3 coord, const float bias)
{
   __asm vec4_texcube __retVal, sampler, coord, bias;
}


vec4 shadow1D(const sampler1DShadow sampler, const vec3 coord, const float bias)
{
   __asm vec4_shad1d __retVal, sampler, coord, bias;
}

vec4 shadow1DProj(const sampler1DShadow sampler, const vec4 coord, const float bias)
{
    return shadow1D (sampler, vec3 (coord.s / coord.q, 0.0, coord.p / coord.q), bias);
}

vec4 shadow2D(const sampler2DShadow sampler, const vec3 coord, const float bias)
{
   __asm vec4_shad2d __retVal, sampler, coord, bias;
}

vec4 shadow2DProj(const sampler2DShadow sampler, const vec4 coord, const float bias)
{
   return shadow2D (sampler, vec3 (coord.s / coord.q, coord.t / coord.q, coord.p / coord.q), bias);
}





//
// 8.8 Fragment Processing Functions
//

float dFdx (float p) {
    // XXX:
    return 0.001;
}

vec2 dFdx (vec2 p) {
    // XXX:
    return vec2 (0.001);
}

vec3 dFdx (vec3 p) {
    // XXX:
    return vec3 (0.001);
}

vec4 dFdx (vec4 p) {
    // XXX:
    return vec4 (0.001);
}

float dFdy (float p) {
    // XXX:
    return 0.001;
}

vec2 dFdy (vec2 p) {
    // XXX:
    return vec2 (0.001);
}

vec3 dFdy (vec3 p) {
    // XXX:
    return vec3 (0.001);
}

vec4 dFdy (vec4 p) {
    // XXX:
    return vec4 (0.001);
}

float fwidth (float p) {
    return abs (dFdx (p)) + abs (dFdy (p));
}

vec2 fwidth (vec2 p) {
    return abs (dFdx (p)) + abs (dFdy (p));
}

vec3 fwidth (vec3 p) {
    return abs (dFdx (p)) + abs (dFdy (p));
}

vec4 fwidth (vec4 p) {
    return abs (dFdx (p)) + abs (dFdy (p));
}

