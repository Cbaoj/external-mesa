#line 2 "glsl_lexer.cpp"

#line 4 "glsl_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE _mesa_glsl_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via _mesa_glsl_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void _mesa_glsl_restart (FILE *input_file ,yyscan_t yyscanner );
void _mesa_glsl__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void _mesa_glsl__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_glsl__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_glsl_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void _mesa_glsl_pop_buffer_state (yyscan_t yyscanner );

static void _mesa_glsl_ensure_buffer_stack (yyscan_t yyscanner );
static void _mesa_glsl__load_buffer_state (yyscan_t yyscanner );
static void _mesa_glsl__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER _mesa_glsl__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE _mesa_glsl__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *_mesa_glsl_alloc (yy_size_t ,yyscan_t yyscanner );
void *_mesa_glsl_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void _mesa_glsl_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer _mesa_glsl__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        _mesa_glsl_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_glsl__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        _mesa_glsl_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_glsl__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define _mesa_glsl_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 145
#define YY_END_OF_BUFFER 146
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[519] =
    {   0,
        0,    0,    9,    9,  146,  144,    1,   14,  144,  144,
      144,  144,  144,  144,  144,  144,   89,   87,  144,  144,
      144,  143,  144,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  144,    1,  144,   84,  145,    9,   13,
      145,   12,   10,   11,    1,   73,   80,   74,   83,   77,
       68,   79,   69,   86,   91,   78,   92,   89,    0,    0,
        0,   87,    0,   70,   72,   71,    0,  143,   76,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
       22,  143,  143,  143,  143,  143,  143,  143,  143,  143,

      143,  143,  143,  143,   26,   50,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,   85,   75,    1,    0,    0,    2,    0,
        0,    0,    0,    9,    8,   12,   11,    0,   91,   90,
        0,   92,    0,   93,   88,   81,   82,   96,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,   25,  143,  143,
      143,  143,  143,  143,  143,  143,   19,  143,  143,  143,
      143,  143,  143,  143,  143,  143,   51,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
        0,    0,    0,    0,    8,    0,   91,    0,   90,    0,
       92,   93,  143,   17,  143,  143,  136,  143,  143,  143,
      143,  143,  143,  143,  143,   24,   99,  143,  143,  143,
       57,  143,  143,  104,  118,  143,  143,  143,  143,  143,
      143,  143,  143,  115,  139,   38,   39,   40,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  102,   94,  143,  143,  143,
      143,  143,  143,   35,   36,   37,   67,  143,  143,    0,

        0,    0,    0,    0,   90,  143,   20,   29,   30,   31,
      143,   97,   16,  143,  143,  143,  143,  126,  127,  128,
      143,   95,  119,   18,  129,  130,  131,  141,  123,  124,
      125,  143,   52,  121,  143,  143,   32,   33,   34,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  116,  143,  143,  143,  143,  143,  143,  143,
      143,   98,  143,  138,  143,  143,   23,    0,    0,    0,
        0,  143,  143,  143,  143,  143,  117,  112,  107,  143,
      143,   41,   42,   43,   44,   45,   46,   47,   48,   49,
      143,  143,  143,  143,  122,  103,  143,  110,   28,  143,

      135,   58,  111,   66,  105,  143,  143,  143,  143,  143,
      143,    0,    0,    0,    0,  143,  143,  143,  106,   27,
      143,  143,  143,  140,  143,  143,  143,  143,  143,  143,
      100,   53,  143,   54,  143,    0,    0,    0,    7,    0,
      143,   55,   21,  113,  143,  143,  143,  108,  143,  143,
      143,  143,  143,  143,  101,  120,  109,    0,    0,    6,
        0,    0,    0,    3,   15,  114,   56,  137,  143,  142,
       60,   61,   62,  143,    0,    0,    0,    0,  143,  143,
      143,  143,  143,  143,    4,    0,    5,    0,    0,    0,
      143,  143,  143,  143,  143,   63,    0,  143,  143,  143,

      143,  143,   59,  143,  132,  143,  133,  143,  143,  143,
       64,  143,   65,  143,  143,  143,  134,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    7,    8,    1,    1,
        1,    9,   10,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   19,   19,   20,   20,   21,    1,   22,
       23,   24,    1,    1,   25,   25,   26,   27,   28,   29,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   31,   32,   30,   30,   30,   30,   33,   30,   30,
        1,    1,    1,   34,   30,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   30,   44,   45,   46,   47,
       48,   49,   30,   50,   51,   52,   53,   54,   55,   56,
       57,   58,    1,   59,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[60] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    4,
        4,    5,    1,    6,    6,    6,    6,    6,    6,    7,
        1,    1,    1,    1,    8,    8,    8,    9,   10,   11,
       11,   11,   12,    1,    8,    8,    8,    8,    9,   10,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   12,   11,   11,    1
    } ;

static yyconst flex_int16_t yy_base[538] =
    {   0,
        0,   58,   81,    0,  809,  810,   59,  810,  785,  784,
       54,  783,   55,   56,   54,  782,  129,  130,   53,  781,
      127,    0,  769,  101,  106,  126,  116,  128,  143,  754,
      144,  136,  753,  128,  145,  747,  142,  760,  159,  165,
      149,  164,  756,  149,  214,  207,  774,  810,  215,  810,
      783,  209,  810,    0,  228,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  205,  810,  208,  133,  223,  171,
        0,  226,  772,  810,  810,  810,  771,    0,  810,  747,
      740,  743,  751,  750,  737,  740,  751,  738,  744,  732,
      729,  742,  729,  726,  726,  732,  720,  205,  725,  735,

      721,  727,  730,  731,    0,  215,  730,  166,  716,  729,
      720,  200,  713,  727,  724,  726,  709,  714,  711,  700,
      709,  207,  713,  709,  711,  700,  703,  188,  708,  700,
      712,  223,  705,  810,  810,  268,  256,  273,  810,  691,
      703,  695,  705,  269,    0,  263,    0,  274,  810,  258,
      278,  810,  314,  280,    0,  810,  810,    0,  693,  697,
      706,  703,  687,  686,  686,  241,  701,  698,  698,  696,
      693,  685,  691,  678,  689,  675,  691,    0,  688,  676,
      683,  680,  684,  677,  666,  665,  678,  681,  678,  673,
      664,  286,  669,  672,  663,  670,  659,  663,  669,  660,

      651,  654,  652,  662,  652,  647,  645,  645,  647,  644,
      655,  654,  259,  649,  644,  633,  297,  651,  653,  642,
      634,  638,  649,  633,    0,  321,  313,  306,  810,  329,
      340,  810,  639,    0,  637,  338,    0,  630,  628,  626,
      634,  623,  640,  629,  341,    0,    0,  623,  633,  633,
        0,  618,  344,    0,    0,  620,  347,  621,  615,  614,
      615,  614,  350,    0,    0,  607,  606,  605,  607,  608,
      613,  607,  603,  616,  611,  610,  602,  606,  598,  601,
      596,  604,  609,  608,  599,    0,    0,  605,  594,  594,
      599,  598,  595,    0,    0,    0,    0,  585,  597,  596,

      595,  592,  581,  356,  367,  595,    0,    0,    0,    0,
      582,    0,    0,  582,  583,  577,  587,    0,    0,    0,
      578,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  585,    0,    0,  583,  579,    0,    0,    0,  365,
      368,  371,  575,  571,  576,  567,  565,  578,  564,  577,
      566,  573,    0,  571,  568,  572,  556,  565,  571,  566,
      554,    0,  556,    0,  555,  558,    0,  553,  597,  552,
      554,  543,  552,  541,  541,  554,    0,  556,    0,  548,
      547,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      529,  542,  529,  526,    0,    0,  531,    0,    0,  522,

        0,    0,    0,    0,    0,  519,  521,  514,  516,  513,
      505,  498,  395,  513,  499,  494,  506,  504,    0,    0,
      493,  497,  483,    0,  482,  470,  467,  452,  375,  456,
        0,    0,  439,    0,  433,  428,  391,  323,  810,  423,
      430,    0,    0,    0,  429,  415,  427,    0,  428,  417,
      436,  435,  434,  407,    0,    0,    0,  411,  402,  810,
      415,    0,  396,  810,    0,    0,    0,    0,  406,    0,
      425,  371,  418,  412,  399,  417,  419,  423,  402,  402,
      404,  400,  402,  384,  810,  425,  810,  437,    0,  433,
      354,  371,  363,  360,  342,    0,  435,  313,  283,  267,

      273,  256,    0,  258,  268,  248,    0,  239,  213,  195,
        0,  206,    0,  168,   32,   11,    0,  810,  469,  473,
      480,  487,  492,  498,  504,  506,  516,  525,  529,  533,
      539,  550,  556,  558,  567,  578,  580
    } ;

static yyconst flex_int16_t yy_def[538] =
    {   0,
      518,    1,  518,    3,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  519,  518,  518,
      518,  520,  518,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  521,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  522,  518,  523,   17,  524,  525,
      526,  519,  518,  518,  518,  518,  518,  520,  518,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,

      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  527,  518,  521,  528,  518,  523,
      529,  518,  518,  525,  526,  518,  518,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,

      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      518,  518,  518,  518,  527,  518,  528,  530,  518,  518,
      529,  518,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  518,

      518,  518,  518,  518,  530,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  518,  518,  518,
      518,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,

      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  518,  518,  518,  518,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  518,  531,  532,  518,  518,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  518,  533,  518,
      518,  534,  532,  518,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  518,  535,  536,  534,  520,  520,
      520,  520,  520,  520,  518,  518,  518,  518,  537,  536,
      520,  520,  520,  520,  520,  520,  537,  520,  520,  520,

      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,    0,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518
    } ;

static yyconst flex_int16_t yy_nxt[870] =
    {   0,
        6,    7,    8,    7,    9,    6,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   18,   18,   18,   18,   18,
        6,   19,   20,   21,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   22,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   22,   22,   22,   44,   45,
       55,   58,   55,   46,   61,  517,   63,   65,   65,   65,
       65,   65,   65,   65,   73,   74,   59,   62,   64,  516,
       47,   48,   49,   50,   49,   48,   48,   48,   48,   48,
       48,   48,   48,   51,   48,   52,   52,   52,   52,   52,

       52,   53,   48,   48,   48,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   48,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   48,
       67,   67,   68,   68,   68,   68,   68,   68,   69,   76,
       77,   80,   81,   82,   89,   83,   70,   70,   90,   84,
       85,   71,  109,   91,   86,  518,  110,   70,   70,   92,
       87,  134,   93,   88,   94,  105,  114,   96,  102,  111,
      153,  153,  106,   95,   71,   97,  103,   98,  518,  107,
       99,  115,  112,  118,  116,  128,  100,  104,  130,  129,

      119,  120,  131,  124,  121,  515,  125,  135,  138,  139,
      122,  132,  190,  123,  126,  136,  144,   55,  144,  137,
      191,  127,  146,  146,  146,  146,  146,  146,  146,   55,
      213,   55,  148,  149,   67,  151,  152,   67,  214,  176,
      514,  206,  195,  148,  149,  140,  151,  152,  196,  513,
       70,  141,  177,   70,  512,  142,  207,  138,  139,  184,
      143,   70,  185,  186,   70,  218,  187,  219,  188,  136,
      144,   55,  144,  137,  138,  139,  146,  146,  146,  146,
      146,  146,  146,  226,  226,  228,  229,  230,  230,  518,
      518,  240,  241,  511,  140,  510,  228,  229,  289,  509,

      141,  266,  267,  268,  142,  508,  290,  507,  232,  143,
      506,  140,  294,  295,  296,  304,  304,  141,  505,  232,
      504,  142,  518,  518,  459,  460,  143,  154,  154,  154,
      154,  154,  154,  154,  227,  227,  227,  227,  227,  227,
      227,  149,  231,  231,  231,  231,  231,  231,  231,  518,
      518,  503,  149,  308,  309,  310,  318,  319,  320,  325,
      326,  327,  329,  330,  331,  337,  338,  339,  152,  305,
      305,  305,  305,  305,  305,  305,  518,  518,  502,  152,
      382,  383,  384,  385,  386,  387,  388,  389,  390,  451,
      452,  453,  459,  460,  501,  229,  413,  459,  460,  500,

      454,  481,  482,  459,  460,  499,  229,  498,  437,  438,
      438,  438,  438,  438,  438,  476,  459,  460,  486,  487,
      486,  487,  496,  462,  459,  460,  486,  487,  461,  461,
      461,  461,  461,  461,  486,  487,  486,  487,  486,  487,
      495,  494,  493,  492,  491,  485,  462,  484,  483,  489,
      488,  488,  488,  488,  488,  488,  480,  479,  475,  474,
      473,  472,  471,  470,  469,  468,  467,  466,  465,  464,
      458,  457,  489,   72,   72,   72,  456,   72,   78,   78,
       78,   78,   78,   78,   78,  147,  147,  147,  147,  147,
      147,  147,   65,   65,  455,   65,   65,  150,  150,  450,

      150,  150,   69,   69,   69,  449,   69,  154,  448,  154,
      154,  155,  155,  155,  155,  155,  225,  225,  447,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  227,  446,
      227,  227,  231,  445,  231,  231,  305,  444,  305,  305,
      461,  461,  443,  442,  461,  441,  440,  439,  436,  435,
      461,  463,  463,  434,  433,  463,  463,  477,  477,  432,
      431,  477,  477,  478,  478,  478,  478,  478,  488,  488,
      430,  429,  488,  428,  427,  426,  425,  424,  488,  490,
      490,  423,  422,  490,  490,  497,  497,  497,  497,  497,
      421,  420,  419,  418,  417,  416,  415,  414,  413,  412,

      411,  410,  409,  408,  407,  406,  405,  404,  403,  402,
      401,  400,  399,  398,  397,  396,  395,  394,  393,  392,
      391,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  336,  335,  334,  333,  332,  328,  324,
      323,  322,  321,  317,  316,  315,  314,  313,  312,  311,
      307,  306,  303,  302,  301,  300,  299,  298,  297,  293,
      292,  291,  288,  287,  286,  285,  284,  283,  282,  281,

      280,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  265,  264,  263,  262,  261,  260,  259,  258,
      257,  256,  255,  254,  253,  252,  251,  250,  249,  248,
      247,  246,  245,  244,  243,  242,  239,  238,  237,  236,
      235,  234,  233,  224,  223,  222,  221,  220,  217,  216,
      215,  212,  211,  210,  209,  208,  205,  204,  203,  202,
      201,  200,  199,  198,  197,  194,  193,  192,  189,  183,
      182,  181,  180,  179,  178,  175,  174,  173,  172,  171,
      170,  169,  168,  167,  166,  165,  164,  163,  162,  161,
      160,  159,  158,  157,  156,  145,   75,  133,  117,  113,

      108,  101,   79,   75,   66,   60,   57,   56,  518,    5,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518
    } ;

static yyconst flex_int16_t yy_chk[870] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        7,   11,    7,    2,   13,  516,   14,   15,   15,   15,
       15,   15,   15,   15,   19,   19,   11,   13,   14,  515,
        2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
       17,   18,   17,   17,   17,   17,   17,   17,   17,   21,
       21,   24,   24,   25,   27,   25,   17,   18,   27,   25,
       26,   17,   34,   27,   26,   68,   34,   17,   18,   27,
       26,   44,   28,   26,   28,   32,   37,   29,   31,   35,
       70,   70,   32,   28,   17,   29,   31,   29,   68,   32,
       29,   37,   35,   39,   37,   41,   29,   31,   42,   41,

       39,   39,   42,   40,   39,  514,   40,   44,   46,   46,
       39,   42,  108,   39,   40,   45,   49,   45,   49,   45,
      108,   40,   52,   52,   52,   52,   52,   52,   52,   55,
      128,   55,   65,   65,   69,   67,   67,   72,  128,   98,
      512,  122,  112,   65,   65,   46,   67,   67,  112,  510,
       69,   46,   98,   72,  509,   46,  122,  137,  137,  106,
       46,   69,  106,  106,   72,  132,  106,  132,  106,  136,
      144,  136,  144,  136,  138,  138,  146,  146,  146,  146,
      146,  146,  146,  148,  148,  150,  150,  151,  151,  154,
      154,  166,  166,  508,  137,  506,  150,  150,  213,  505,

      137,  192,  192,  192,  137,  504,  213,  502,  154,  137,
      501,  138,  217,  217,  217,  228,  228,  138,  500,  154,
      499,  138,  227,  227,  438,  438,  138,  153,  153,  153,
      153,  153,  153,  153,  226,  226,  226,  226,  226,  226,
      226,  227,  230,  230,  230,  230,  230,  230,  230,  231,
      231,  498,  227,  236,  236,  236,  245,  245,  245,  253,
      253,  253,  257,  257,  257,  263,  263,  263,  231,  304,
      304,  304,  304,  304,  304,  304,  305,  305,  495,  231,
      340,  340,  340,  341,  341,  341,  342,  342,  342,  429,
      429,  429,  437,  437,  494,  305,  413,  463,  463,  493,

      429,  472,  472,  459,  459,  492,  305,  491,  413,  413,
      413,  413,  413,  413,  413,  459,  461,  461,  476,  476,
      477,  477,  484,  437,  478,  478,  486,  486,  461,  461,
      461,  461,  461,  461,  490,  490,  497,  497,  488,  488,
      483,  482,  481,  480,  479,  475,  437,  474,  473,  476,
      488,  488,  488,  488,  488,  488,  471,  469,  458,  454,
      453,  452,  451,  450,  449,  447,  446,  445,  441,  440,
      436,  435,  476,  519,  519,  519,  433,  519,  520,  520,
      520,  520,  520,  520,  520,  521,  521,  521,  521,  521,
      521,  521,  522,  522,  430,  522,  522,  523,  523,  428,

      523,  523,  524,  524,  524,  427,  524,  525,  426,  525,
      525,  526,  526,  526,  526,  526,  527,  527,  425,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  528,  423,
      528,  528,  529,  422,  529,  529,  530,  421,  530,  530,
      531,  531,  418,  417,  531,  416,  415,  414,  412,  411,
      531,  532,  532,  410,  409,  532,  532,  533,  533,  408,
      407,  533,  533,  534,  534,  534,  534,  534,  535,  535,
      406,  400,  535,  397,  394,  393,  392,  391,  535,  536,
      536,  381,  380,  536,  536,  537,  537,  537,  537,  537,
      378,  376,  375,  374,  373,  372,  371,  370,  369,  368,

      366,  365,  363,  361,  360,  359,  358,  357,  356,  355,
      354,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      343,  336,  335,  332,  321,  317,  316,  315,  314,  311,
      306,  303,  302,  301,  300,  299,  298,  293,  292,  291,
      290,  289,  288,  285,  284,  283,  282,  281,  280,  279,
      278,  277,  276,  275,  274,  273,  272,  271,  270,  269,
      268,  267,  266,  262,  261,  260,  259,  258,  256,  252,
      250,  249,  248,  244,  243,  242,  241,  240,  239,  238,
      235,  233,  224,  223,  222,  221,  220,  219,  218,  216,
      215,  214,  212,  211,  210,  209,  208,  207,  206,  205,

      204,  203,  202,  201,  200,  199,  198,  197,  196,  195,
      194,  193,  191,  190,  189,  188,  187,  186,  185,  184,
      183,  182,  181,  180,  179,  177,  176,  175,  174,  173,
      172,  171,  170,  169,  168,  167,  165,  164,  163,  162,
      161,  160,  159,  143,  142,  141,  140,  133,  131,  130,
      129,  127,  126,  125,  124,  123,  121,  120,  119,  118,
      117,  116,  115,  114,  113,  111,  110,  109,  107,  104,
      103,  102,  101,  100,   99,   97,   96,   95,   94,   93,
       92,   91,   90,   89,   88,   87,   86,   85,   84,   83,
       82,   81,   80,   77,   73,   51,   47,   43,   38,   36,

       33,   30,   23,   20,   16,   12,   10,    9,    5,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "glsl_lexer.lpp"
#line 2 "glsl_lexer.lpp"
/*
 * Copyright © 2008, 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <ctype.h>
#include "ast.h"
#include "glsl_parser_extras.h"
#include "glsl_parser.h"

#define YY_USER_ACTION						\
   do {								\
      yylloc->source = 0;					\
      yylloc->first_column = yycolumn + 1;			\
      yylloc->first_line = yylineno + 1;			\
      yycolumn += yyleng;					\
   } while(0);

#define YY_USER_INIT yylineno = 0; yycolumn = 0;


#line 845 "glsl_lexer.cpp"

#define INITIAL 0
#define PP 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct _mesa_glsl_parse_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int _mesa_glsl_lex_init (yyscan_t* scanner);

int _mesa_glsl_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int _mesa_glsl_lex_destroy (yyscan_t yyscanner );

int _mesa_glsl_get_debug (yyscan_t yyscanner );

void _mesa_glsl_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE _mesa_glsl_get_extra (yyscan_t yyscanner );

void _mesa_glsl_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *_mesa_glsl_get_in (yyscan_t yyscanner );

void _mesa_glsl_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *_mesa_glsl_get_out (yyscan_t yyscanner );

void _mesa_glsl_set_out  (FILE * out_str ,yyscan_t yyscanner );

int _mesa_glsl_get_leng (yyscan_t yyscanner );

char *_mesa_glsl_get_text (yyscan_t yyscanner );

int _mesa_glsl_get_lineno (yyscan_t yyscanner );

void _mesa_glsl_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * _mesa_glsl_get_lval (yyscan_t yyscanner );

void _mesa_glsl_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *_mesa_glsl_get_lloc (yyscan_t yyscanner );
    
        void _mesa_glsl_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int _mesa_glsl_wrap (yyscan_t yyscanner );
#else
extern int _mesa_glsl_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int _mesa_glsl_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int _mesa_glsl_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 56 "glsl_lexer.lpp"


#line 1094 "glsl_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			_mesa_glsl_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				_mesa_glsl__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		_mesa_glsl__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 519 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 518 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "glsl_lexer.lpp"
;
	YY_BREAK
/* Preprocessor tokens. */ 
case 2:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 61 "glsl_lexer.lpp"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 62 "glsl_lexer.lpp"
{ BEGIN PP; return VERSION; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 63 "glsl_lexer.lpp"
{ BEGIN PP; return EXTENSION; }
	YY_BREAK
case 5:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 64 "glsl_lexer.lpp"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;
				   yylloc->source = strtol(ptr, NULL, 0);
				}
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 79 "glsl_lexer.lpp"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;
				}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 93 "glsl_lexer.lpp"
{ BEGIN PP; return PRAGMA; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 94 "glsl_lexer.lpp"
{ }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 95 "glsl_lexer.lpp"
{ }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 96 "glsl_lexer.lpp"
return COLON;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 97 "glsl_lexer.lpp"
{
				   yylval->identifier = strdup(yytext);
				   return IDENTIFIER;
				}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 101 "glsl_lexer.lpp"
{
				    yylval->n = strtol(yytext, NULL, 10);
				    return INTCONSTANT;
				}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 105 "glsl_lexer.lpp"
{ BEGIN 0; yylineno++; yycolumn = 0; return EOL; }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 107 "glsl_lexer.lpp"
{ yylineno++; yycolumn = 0; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 109 "glsl_lexer.lpp"
return ATTRIBUTE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 110 "glsl_lexer.lpp"
return CONST_TOK;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 111 "glsl_lexer.lpp"
return BOOL;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 112 "glsl_lexer.lpp"
return FLOAT;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 113 "glsl_lexer.lpp"
return INT;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 115 "glsl_lexer.lpp"
return BREAK;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 116 "glsl_lexer.lpp"
return CONTINUE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 117 "glsl_lexer.lpp"
return DO;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 118 "glsl_lexer.lpp"
return WHILE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 119 "glsl_lexer.lpp"
return ELSE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 120 "glsl_lexer.lpp"
return FOR;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 121 "glsl_lexer.lpp"
return IF;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 122 "glsl_lexer.lpp"
return DISCARD;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 123 "glsl_lexer.lpp"
return RETURN;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 125 "glsl_lexer.lpp"
return BVEC2;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 126 "glsl_lexer.lpp"
return BVEC3;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 127 "glsl_lexer.lpp"
return BVEC4;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 128 "glsl_lexer.lpp"
return IVEC2;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 129 "glsl_lexer.lpp"
return IVEC3;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 130 "glsl_lexer.lpp"
return IVEC4;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 131 "glsl_lexer.lpp"
return VEC2;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 132 "glsl_lexer.lpp"
return VEC3;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 133 "glsl_lexer.lpp"
return VEC4;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 134 "glsl_lexer.lpp"
return MAT2;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 135 "glsl_lexer.lpp"
return MAT3;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 136 "glsl_lexer.lpp"
return MAT4;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 137 "glsl_lexer.lpp"
return MAT2X2;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 138 "glsl_lexer.lpp"
return MAT2X3;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 139 "glsl_lexer.lpp"
return MAT2X4;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 140 "glsl_lexer.lpp"
return MAT3X2;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 141 "glsl_lexer.lpp"
return MAT3X3;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 142 "glsl_lexer.lpp"
return MAT3X4;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 143 "glsl_lexer.lpp"
return MAT4X2;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 144 "glsl_lexer.lpp"
return MAT4X3;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 145 "glsl_lexer.lpp"
return MAT4X4;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 147 "glsl_lexer.lpp"
return IN;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 148 "glsl_lexer.lpp"
return OUT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 149 "glsl_lexer.lpp"
return INOUT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 150 "glsl_lexer.lpp"
return UNIFORM;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 151 "glsl_lexer.lpp"
return VARYING;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 152 "glsl_lexer.lpp"
{
		   if (yyextra->language_version >= 120) {
		      return CENTROID;
		   } else {
		      yylval->identifier = strdup(yytext);
		      return IDENTIFIER;
		   }
		}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 160 "glsl_lexer.lpp"
{
		   if (yyextra->language_version >= 120) {
		      return INVARIANT;
		   } else {
		      yylval->identifier = strdup(yytext);
		      return IDENTIFIER;
		   }
		}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 169 "glsl_lexer.lpp"
{
		   if (yyextra->language_version >= 130) {
		      return FLAT;
		   } else {
		      yylval->identifier = strdup(yytext);
		      return IDENTIFIER;
		   }
		}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 177 "glsl_lexer.lpp"
{
		   if (yyextra->language_version >= 130) {
		      return SMOOTH;
		   } else {
		      yylval->identifier = strdup(yytext);
		      return IDENTIFIER;
		   }
		}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 185 "glsl_lexer.lpp"
{
		   if (yyextra->language_version >= 130) {
		      return NOPERSPECTIVE;
		   } else {
		      yylval->identifier = strdup(yytext);
		      return IDENTIFIER;
		   }
		}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 194 "glsl_lexer.lpp"
return SAMPLER1D;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 195 "glsl_lexer.lpp"
return SAMPLER2D;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 196 "glsl_lexer.lpp"
return SAMPLER3D;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 197 "glsl_lexer.lpp"
return SAMPLERCUBE;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 198 "glsl_lexer.lpp"
return SAMPLER1DSHADOW;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 199 "glsl_lexer.lpp"
return SAMPLER2DSHADOW;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 201 "glsl_lexer.lpp"
return STRUCT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 202 "glsl_lexer.lpp"
return VOID;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 204 "glsl_lexer.lpp"
return INC_OP;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 205 "glsl_lexer.lpp"
return DEC_OP;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 206 "glsl_lexer.lpp"
return LE_OP;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 207 "glsl_lexer.lpp"
return GE_OP;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 208 "glsl_lexer.lpp"
return EQ_OP;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 209 "glsl_lexer.lpp"
return NE_OP;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 210 "glsl_lexer.lpp"
return AND_OP;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 211 "glsl_lexer.lpp"
return OR_OP;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 212 "glsl_lexer.lpp"
return XOR_OP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 214 "glsl_lexer.lpp"
return MUL_ASSIGN;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 215 "glsl_lexer.lpp"
return DIV_ASSIGN;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 216 "glsl_lexer.lpp"
return ADD_ASSIGN;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 217 "glsl_lexer.lpp"
return MOD_ASSIGN;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 218 "glsl_lexer.lpp"
return LEFT_ASSIGN;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 219 "glsl_lexer.lpp"
return RIGHT_ASSIGN;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 220 "glsl_lexer.lpp"
return AND_ASSIGN;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 221 "glsl_lexer.lpp"
return XOR_ASSIGN;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 222 "glsl_lexer.lpp"
return OR_ASSIGN;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 223 "glsl_lexer.lpp"
return SUB_ASSIGN;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 225 "glsl_lexer.lpp"
{
			    yylval->n = strtol(yytext, NULL, 10);
			    return INTCONSTANT;
			}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 229 "glsl_lexer.lpp"
{
			    yylval->n = strtol(yytext + 2, NULL, 16);
			    return INTCONSTANT;
			}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 233 "glsl_lexer.lpp"
{
			    yylval->n = strtol(yytext, NULL, 8);
			    return INTCONSTANT;
			}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 238 "glsl_lexer.lpp"
{
			    yylval->real = strtod(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 242 "glsl_lexer.lpp"
{
			    yylval->real = strtod(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 246 "glsl_lexer.lpp"
{
			    yylval->real = strtod(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 250 "glsl_lexer.lpp"
{
			    yylval->real = strtod(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 255 "glsl_lexer.lpp"
{
			    yylval->n = 1;
			    return BOOLCONSTANT;
			}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 259 "glsl_lexer.lpp"
{
			    yylval->n = 0;
			    return BOOLCONSTANT;
			}
	YY_BREAK
/* Reserved words in GLSL 1.10. */
case 96:
YY_RULE_SETUP
#line 266 "glsl_lexer.lpp"
return ASM;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 267 "glsl_lexer.lpp"
return CLASS;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 268 "glsl_lexer.lpp"
return UNION;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 269 "glsl_lexer.lpp"
return ENUM;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 270 "glsl_lexer.lpp"
return TYPEDEF;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 271 "glsl_lexer.lpp"
return TEMPLATE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 272 "glsl_lexer.lpp"
return THIS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 273 "glsl_lexer.lpp"
return PACKED;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 274 "glsl_lexer.lpp"
return GOTO;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 275 "glsl_lexer.lpp"
return SWITCH;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 276 "glsl_lexer.lpp"
return DEFAULT;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 277 "glsl_lexer.lpp"
return INLINE_TOK;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 278 "glsl_lexer.lpp"
return NOINLINE;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 279 "glsl_lexer.lpp"
return VOLATILE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 280 "glsl_lexer.lpp"
return PUBLIC_TOK;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 281 "glsl_lexer.lpp"
return STATIC;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 282 "glsl_lexer.lpp"
return EXTERN;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 283 "glsl_lexer.lpp"
return EXTERNAL;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 284 "glsl_lexer.lpp"
return INTERFACE;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 285 "glsl_lexer.lpp"
return LONG;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 286 "glsl_lexer.lpp"
return SHORT;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 287 "glsl_lexer.lpp"
return DOUBLE;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 288 "glsl_lexer.lpp"
return HALF;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 289 "glsl_lexer.lpp"
return FIXED;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 290 "glsl_lexer.lpp"
return UNSIGNED;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 291 "glsl_lexer.lpp"
return INPUT;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 292 "glsl_lexer.lpp"
return OUTPUT;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 293 "glsl_lexer.lpp"
return HVEC2;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 294 "glsl_lexer.lpp"
return HVEC3;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 295 "glsl_lexer.lpp"
return HVEC4;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 296 "glsl_lexer.lpp"
return DVEC2;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 297 "glsl_lexer.lpp"
return DVEC3;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 298 "glsl_lexer.lpp"
return DVEC4;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 299 "glsl_lexer.lpp"
return FVEC2;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 300 "glsl_lexer.lpp"
return FVEC3;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 301 "glsl_lexer.lpp"
return FVEC4;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 302 "glsl_lexer.lpp"
return SAMPLER2DRECT;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 303 "glsl_lexer.lpp"
return SAMPLER3DRECT;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 304 "glsl_lexer.lpp"
return SAMPLER2DRECTSHADOW;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 305 "glsl_lexer.lpp"
return SIZEOF;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 306 "glsl_lexer.lpp"
return CAST;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 307 "glsl_lexer.lpp"
return NAMESPACE;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 308 "glsl_lexer.lpp"
return USING;
	YY_BREAK
/* Additional reserved words in GLSL 1.20. */
case 139:
YY_RULE_SETUP
#line 311 "glsl_lexer.lpp"
return LOWP;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 312 "glsl_lexer.lpp"
return MEDIUMP;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 313 "glsl_lexer.lpp"
return HIGHP;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 314 "glsl_lexer.lpp"
return PRECISION;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 316 "glsl_lexer.lpp"
{
			    struct _mesa_glsl_parse_state *state = yyextra;
			    void *ctx = state;	
			    yylval->identifier = talloc_strdup(ctx, yytext);
			    return IDENTIFIER;
			}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 323 "glsl_lexer.lpp"
{ return yytext[0]; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 325 "glsl_lexer.lpp"
ECHO;
	YY_BREAK
#line 2017 "glsl_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * _mesa_glsl_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( _mesa_glsl_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of _mesa_glsl_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					_mesa_glsl_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			_mesa_glsl_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _mesa_glsl_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 519 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 519 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 518);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					_mesa_glsl_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( _mesa_glsl_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void _mesa_glsl_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        _mesa_glsl_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            _mesa_glsl__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	_mesa_glsl__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	_mesa_glsl__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		_mesa_glsl_pop_buffer_state();
	 *		_mesa_glsl_push_buffer_state(new_buffer);
     */
	_mesa_glsl_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	_mesa_glsl__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (_mesa_glsl_wrap()) processing, but the only time this flag
	 * is looked at is after _mesa_glsl_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void _mesa_glsl__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE _mesa_glsl__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) _mesa_glsl_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) _mesa_glsl_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl__create_buffer()" );

	b->yy_is_our_buffer = 1;

	_mesa_glsl__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with _mesa_glsl__create_buffer()
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		_mesa_glsl_free((void *) b->yy_ch_buf ,yyscanner );

	_mesa_glsl_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a _mesa_glsl_restart() or at EOF.
 */
    static void _mesa_glsl__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	_mesa_glsl__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then _mesa_glsl__init_buffer was _probably_
     * called from _mesa_glsl_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		_mesa_glsl__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void _mesa_glsl_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	_mesa_glsl_ensure_buffer_stack(yyscanner);

	/* This block is copied from _mesa_glsl__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from _mesa_glsl__switch_to_buffer. */
	_mesa_glsl__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void _mesa_glsl_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	_mesa_glsl__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		_mesa_glsl__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void _mesa_glsl_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_glsl_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_glsl_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE _mesa_glsl__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) _mesa_glsl_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	_mesa_glsl__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to _mesa_glsl_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       _mesa_glsl__scan_bytes() instead.
 */
YY_BUFFER_STATE _mesa_glsl__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return _mesa_glsl__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to _mesa_glsl_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE _mesa_glsl__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) _mesa_glsl_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = _mesa_glsl__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in _mesa_glsl__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE _mesa_glsl_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_glsl_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_glsl_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *_mesa_glsl_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "_mesa_glsl_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "_mesa_glsl_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see _mesa_glsl__switch_to_buffer
 */
void _mesa_glsl_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void _mesa_glsl_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int _mesa_glsl_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void _mesa_glsl_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * _mesa_glsl_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void _mesa_glsl_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *_mesa_glsl_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void _mesa_glsl_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* _mesa_glsl_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int _mesa_glsl_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) _mesa_glsl_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* _mesa_glsl_lex_init_extra has the same functionality as _mesa_glsl_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to _mesa_glsl_alloc in
 * the yyextra field.
 */

int _mesa_glsl_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    _mesa_glsl_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) _mesa_glsl_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    _mesa_glsl_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from _mesa_glsl_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * _mesa_glsl_lex_init()
     */
    return 0;
}

/* _mesa_glsl_lex_destroy is for both reentrant and non-reentrant scanners. */
int _mesa_glsl_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		_mesa_glsl__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		_mesa_glsl_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	_mesa_glsl_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        _mesa_glsl_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * _mesa_glsl_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    _mesa_glsl_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *_mesa_glsl_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *_mesa_glsl_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void _mesa_glsl_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see _mesa_glsl_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 325 "glsl_lexer.lpp"



void
_mesa_glsl_lexer_ctor(struct _mesa_glsl_parse_state *state, const char *string)
{
   _mesa_glsl_lex_init_extra(state,& state->scanner);
   _mesa_glsl__scan_string(string,state->scanner);
}

void
_mesa_glsl_lexer_dtor(struct _mesa_glsl_parse_state *state)
{
   _mesa_glsl_lex_destroy(state->scanner);
}

