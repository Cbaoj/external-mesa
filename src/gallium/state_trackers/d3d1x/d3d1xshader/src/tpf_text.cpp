/**************************************************************************
 *
 * Copyright 2010 Luca Barbieri
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

// generated with sed -re 's/TPF_WHATEVER_//; s/=.*//; s,//.*,,; s/,//; s/\s*//g;'|tr '[A-Z]' '[a-z]'|tr -s '\n'|sed -re 's/(.*)/\t"\1",/g'

const char* tpf_opcode_names[] =
{
	"add",
	"and",
	"break",
	"breakc",
	"call",
	"callc",
	"case",
	"continue",
	"continuec",
	"cut",
	"default",
	"deriv_rtx",
	"deriv_rty",
	"discard",
	"div",
	"dp2",
	"dp3",
	"dp4",
	"else",
	"emit",
	"emitthencut",
	"endif",
	"endloop",
	"endswitch",
	"eq",
	"exp",
	"frc",
	"ftoi",
	"ftou",
	"ge",
	"iadd",
	"if",
	"ieq",
	"ige",
	"ilt",
	"imad",
	"imax",
	"imin",
	"imul",
	"ine",
	"ineg",
	"ishl",
	"ishr",
	"itof",
	"label",
	"ld",
	"ld_ms",
	"log",
	"loop",
	"lt",
	"mad",
	"min",
	"max",
	"customdata",
	"mov",
	"movc",
	"mul",
	"ne",
	"nop",
	"not",
	"or",
	"resinfo",
	"ret",
	"retc",
	"round_ne",
	"round_ni",
	"round_pi",
	"round_z",
	"rsq",
	"sample",
	"sample_c",
	"sample_c_lz",
	"sample_l",
	"sample_d",
	"sample_b",
	"sqrt",
	"switch",
	"sincos",
	"udiv",
	"ult",
	"uge",
	"umul",
	"umad",
	"umax",
	"umin",
	"ushr",
	"utof",
	"xor",
	"dcl_resource",
	"dcl_constant_buffer",
	"dcl_sampler",
	"dcl_index_range",
	"dcl_gs_output_primitive_topology",
	"dcl_gs_input_primitive",
	"dcl_max_output_vertex_count",
	"dcl_input",
	"dcl_input_sgv",
	"dcl_input_siv",
	"dcl_input_ps",
	"dcl_input_ps_sgv",
	"dcl_input_ps_siv",
	"dcl_output",
	"dcl_output_sgv",
	"dcl_output_siv",
	"dcl_temps",
	"dcl_indexable_temp",
	"dcl_global_flags",
	"d3d10_count",
	"lod",
	"gather4",
	"sample_pos",
	"sample_info",
	"d3d10_1_count",
	"hs_decls",
	"hs_control_point_phase",
	"hs_fork_phase",
	"hs_join_phase",
	"emit_stream",
	"cut_stream",
	"emitthencut_stream",
	"interface_call",
	"bufinfo",
	"deriv_rtx_coarse",
	"deriv_rtx_fine",
	"deriv_rty_coarse",
	"deriv_rty_fine",
	"gather4_c",
	"gather4_po",
	"gather4_po_c",
	"rcp",
	"f32tof16",
	"f16tof32",
	"uaddc",
	"usubb",
	"countbits",
	"firstbit_hi",
	"firstbit_lo",
	"firstbit_shi",
	"ubfe",
	"ibfe",
	"bfi",
	"bfrev",
	"swapc",
	"dcl_stream",
	"dcl_function_body",
	"dcl_function_table",
	"dcl_interface",
	"dcl_input_control_point_count",
	"dcl_output_control_point_count",
	"dcl_tess_domain",
	"dcl_tess_partitioning",
	"dcl_tess_output_primitive",
	"dcl_hs_max_tessfactor",
	"dcl_hs_fork_phase_instance_count",
	"dcl_hs_join_phase_instance_count",
	"dcl_thread_group",
	"dcl_unordered_access_view_typed",
	"dcl_unordered_access_view_raw",
	"dcl_unordered_access_view_structured",
	"dcl_thread_group_shared_memory_raw",
	"dcl_thread_group_shared_memory_structured",
	"dcl_resource_raw",
	"dcl_resource_structured",
	"ld_uav_typed",
	"store_uav_typed",
	"ld_raw",
	"store_raw",
	"ld_structured",
	"store_structured",
	"atomic_and",
	"atomic_or",
	"atomic_xor",
	"atomic_cmp_store",
	"atomic_iadd",
	"atomic_imax",
	"atomic_imin",
	"atomic_umax",
	"atomic_umin",
	"imm_atomic_alloc",
	"imm_atomic_consume",
	"imm_atomic_iadd",
	"imm_atomic_and",
	"imm_atomic_or",
	"imm_atomic_xor",
	"imm_atomic_exch",
	"imm_atomic_cmp_exch",
	"imm_atomic_imax",
	"imm_atomic_imin",
	"imm_atomic_umax",
	"imm_atomic_umin",
	"sync",
	"dadd",
	"dmax",
	"dmin",
	"dmul",
	"deq",
	"dge",
	"dlt",
	"dne",
	"dmov",
	"dmovc",
	"dtof",
	"ftod",
	"eval_snapped",
	"eval_sample_index",
	"eval_centroid",
	"dcl_gs_instance_count",
	"d3d11_count",
};

const char* tpf_file_names[] =
{
	"temp",
	"input",
	"output",
	"indexable_temp",
	"immediate32",
	"immediate64",
	"sampler",
	"resource",
	"constant_buffer",
	"immediate_constant_buffer",
	"label",
	"input_primitiveid",
	"output_depth",
	"null",
	"rasterizer",
	"output_coverage_mask",
	"stream",
	"function_body",
	"function_table",
	"interface",
	"function_input",
	"function_output",
	"output_control_point_id",
	"input_fork_instance_id",
	"input_join_instance_id",
	"input_control_point",
	"output_control_point",
	"input_patch_constant",
	"input_domain_point",
	"this_pointer",
	"unordered_access_view",
	"thread_group_shared_memory",
	"input_thread_id",
	"input_thread_group_id",
	"input_thread_id_in_group",
	"input_coverage_mask",
	"input_thread_id_in_group_flattened",
	"input_gs_instance_id",
	"output_depth_greater_equal",
	"output_depth_less_equal",
	"cycle_counter",
};

const char* tpf_file_ms_names[] =
{
	"r",
	"v",
	"o",
	"x",
	"l",
	"d",
	"sampler",
	"resource",
	"cb",
	"icb",
	"label",
	"vPrim",
	"oDepth",
	"null",
	"rasterizer",
	"oMask",
	"stream",
	"function_body",
	"function_table",
	"interface",
	"function_input",
	"function_output",
	"vOutputControlPointID",
	"vForkInstanceID",
	"vJoinInstanceID",
	"vicp",
	"vocp",
	"input_patch_constant",
	"vDomain",
	"this",
	"u",
	"g",
	"vThreadID",
	"vThreadGrouID",
	"vThreadIDInGroup",
	"vCoverage",
	"vThreadIDInGroupFlattened",
	"vGSInstanceID",
	"oDepthGE",
	"oDepthLE",
	"vCycleCounter",
};

const char* tpf_target_names[] =
{
	"unknown",
	"buffer",
	"texture1d",
	"texture2d",
	"texture2dms",
	"texture3d",
	"texturecube",
	"texture1darray",
	"texture2darray",
	"texture2dmsarray",
	"texturecubearray",
	"raw_buffer",
	"structured_buffer",
};

const char* tpf_interpolation_names[] =
{
	"undefined",
	"constant",
	"linear",
	"linear centroid",
	"linear noperspective",
	"linear noperspective centroid",
	"linear sample",
	"linear noperspective sample",
};

const char* tpf_sv_names[] =
{
	"undefined",
	"position",
	"clip_distance",
	"cull_distance",
	"render_target_array_index",
	"viewport_array_index",
	"vertex_id",
	"primitive_id",
	"instance_id",
	"is_front_face",
	"sample_index",
	"final_quad_u_eq_0_edge_tessfactor",
	"final_quad_v_eq_0_edge_tessfactor",
	"final_quad_u_eq_1_edge_tessfactor",
	"final_quad_v_eq_1_edge_tessfactor",
	"final_quad_u_inside_tessfactor",
	"final_quad_v_inside_tessfactor",
	"final_tri_u_eq_0_edge_tessfactor",
	"final_tri_v_eq_0_edge_tessfactor",
	"final_tri_w_eq_0_edge_tessfactor",
	"final_tri_inside_tessfactor",
	"final_line_detail_tessfactor",
	"final_line_density_tessfactor",
};
